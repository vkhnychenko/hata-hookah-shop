import re
from aiogram import types
from aiogram.dispatcher.filters.builtin import CommandStart
from aiogram.types import InputMediaPhoto
from ugc.loader import dp, bot
from ugc.keyboards import start_kb, category_kb, product_info_kb, cart_kb, delete_confirm, confirm_order
from ugc.message_text import category_text
from ugc.service import add_new_user, get_products, get_product, add_cart, get_cart
from django.conf import settings
from aiogram.types import CallbackQuery
from aiogram.dispatcher import FSMContext
from aiogram.types import InlineQuery, InputTextMessageContent, InlineQueryResultArticle
from asyncio import sleep
from ugc.states import Order, DeleteProduct, Checkout


async def edit_cart(call, cart, i=0):
    cart_product = cart.get_products()
    kb = await cart_kb(cart, cart_product.count(), i)
    await call.message.edit_media(
        media=InputMediaPhoto(
            media=settings.URL + cart_product[i].product.image.url,
            caption=f'<b>{cart_product[i].product.name} {cart_product[i].product.description}.\n\n'
                    f'{cart_product[i].quantity} —à—Ç.\n\n'
                    f'{cart_product[i].product.price} —Ä—É–±.</b>'),
        reply_markup=kb)


async def send_cart(cart, user_id, i=0):
    cart_product = cart.get_products()
    if not cart_product:
        kb = await category_kb()
        await bot.send_message(user_id, f'–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.\n\n{category_text}',
                               reply_markup=kb)
    else:
        print('cart_product', cart_product)
        photo = settings.URL + cart_product[i].product.image.url
        kb = await cart_kb(cart, cart_product.count(), 0)
        await bot.send_photo(
            user_id,
            photo=photo,
            caption=f'<b>{cart_product[i].product.name} {cart_product[i].product.description}.\n\n'
                    f'{cart_product[i].quantity} —à—Ç.\n\n'
                    f'{cart_product[i].product.price} —Ä—É–±.</b>',
            reply_markup=kb
        )


@dp.message_handler(CommandStart(), state='*')
async def bot_start(message: types.Message):
    user = await add_new_user(message)
    if user.is_admin:
        await message.answer(
            f'–ü—Ä–∏–≤–µ—Ç –ê–¥–º–∏–Ω, {message.from_user.full_name}! –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É',
            reply_markup=start_kb
        )
    else:
        await message.answer(
            f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω –•–ê–¢–ê',
            reply_markup=start_kb
        )


@dp.message_handler(text='–í—ã–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä—ã', state='*')
async def choice_product(message: types.Message, state: FSMContext):
    kb = await category_kb()
    await message.answer(category_text, reply_markup=kb)


@dp.message_handler(text='üõí–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É', state='*')
async def show_cart(message: types.Message, state: FSMContext):
    cart = await get_cart(message.chat.id)
    if not cart:
        await message.answer('–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.')
    else:
        await send_cart(cart, message.chat.id)
        await state.update_data(cart=cart, i=0)


@dp.inline_handler(state='*')
async def inline_categories(inline_query: InlineQuery, state: FSMContext):
    category_id = inline_query.query
    result = []
    products = await get_products(category_id)
    for product in products:
        print(settings.URL + product.image.url)
        try:
            result.append(InlineQueryResultArticle(
                id=product.id,
                thumb_url=settings.URL + product.image.url,
                title=product.name,
                description=f'{product.price} —Ä—É–±.',
                input_message_content=InputTextMessageContent(product.id)
            ))
        except TypeError:
            await sleep(5)
    await bot.answer_inline_query(inline_query.id, results=result, cache_time=5)
    await Order.select.set()


@dp.message_handler(state=Order.select)
async def hand_product(message: types.Message, state: FSMContext):
    quantity = 1
    product = await get_product(message.text)
    photo = settings.URL + product.image.url
    kb = await product_info_kb(quantity)
    await message.answer_photo(
        photo=photo,
        caption=f'<b>{product.description}.\n\n'
                f'{product.price} —Ä—É–±.</b>',
        reply_markup=kb
    )
    await state.update_data(product=product, quantity=quantity)


@dp.callback_query_handler(lambda call: call.data in ['up', 'down'], state='*')
async def up_down_handlers(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    quantity = data.get('quantity')
    if call.data == 'up':
        await bot.answer_callback_query(call.id)
        quantity += 1
        kb = await product_info_kb(quantity)
        await call.message.edit_reply_markup(kb)
    if call.data == 'down':
        if quantity == 1:
            await bot.answer_callback_query(call.id, '–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –º–µ–Ω—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', show_alert=False)
        else:
            await bot.answer_callback_query(call.id)
            quantity -= 1
            kb = await product_info_kb(quantity)
            await call.message.edit_reply_markup(kb)
    await state.update_data(quantity=quantity)


@dp.callback_query_handler(lambda call: call.data in ['left', 'right'], state='*')
async def left_right_handlers(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    i = data.get('i', 0)
    cart = data.get('cart')
    cart_product = cart.get_products()
    if call.data == 'right':
        await bot.answer_callback_query(call.id)
        if i != cart_product.count() - 1:
            i = i + 1
            await edit_cart(call, cart, i)
    if call.data == 'left':
        await bot.answer_callback_query(call.id)
        if i != 0:
            i = i - 1
            await edit_cart(call, cart, i)
    await state.update_data(i=i)


@dp.callback_query_handler(lambda call: call.data in ['add', 'cancel', 'delete_product', 'delete_cart', 'pay'],
                           state='*')
async def cart_handlers(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    await bot.answer_callback_query(call.id)
    if call.data == 'add':
        product = data.get('product')
        quantity = data.get('quantity')
        await add_cart(call.message.chat.id, product, quantity)
        cart = await get_cart(call.message.chat.id)
        await send_cart(cart, call.message.chat.id)
        await state.update_data(cart=cart, i=0)

    if call.data == 'cancel':
        await call.message.delete()
        kb = await category_kb()
        await call.message.answer(category_text, reply_markup=kb)

    if call.data == 'delete_cart':
        cart = data.get('cart')
        cart.delete()
        await bot.delete_message(call.message.chat.id, call.message.message_id)
        await call.message.answer('–í–∞—à–∞ –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞')
        kb = await category_kb()
        await call.message.answer(category_text, reply_markup=kb)

    if call.data == 'delete_product':
        await bot.answer_callback_query(call.id)
        await call.message.edit_reply_markup(reply_markup=delete_confirm)
        await DeleteProduct.delete.set()

    if call.data == 'pay':
        await bot.answer_callback_query(call.id)
        cart = data.get('cart')
        cart_product = cart.get_products()
        text = '–í–∞—à –∑–∞–∫–∞–∑:\n\n'
        for product in cart_product:
            text += f'{product.product.name} - {product.quantity} —à—Ç. {product.total_price} —Ä—É–±.\n'
        text += f'\n–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞: {cart.total_price} —Ä—É–±\n'
        await call.message.answer(
            text,
            reply_markup=confirm_order
        )
        await Checkout.confirm.set()


@dp.callback_query_handler(lambda call: call.data in ['yes_del', 'no_del'], state=DeleteProduct.delete)
async def confirm_delete(call: CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(call.id)
    data = await state.get_data()
    i = data.get('i')
    cart = data.get('cart')
    cart_product = cart.get_products()
    if call.data == 'yes_del':
        await bot.delete_message(call.message.chat.id, call.message.message_id)
        cart_product[i].delete()
        cart = await get_cart(call.message.chat.id)
        await send_cart(cart, call.message.chat.id, 0)
        await state.update_data(i=0, cart=cart)

    if call.data == 'no_del':
        kb = await cart_kb(cart, cart_product.count(), i)
        await call.message.edit_reply_markup(reply_markup=kb)


@dp.callback_query_handler(lambda call: call.data in ['confirm', 'back_cart'], state=Checkout.confirm)
async def confirm_handler(call: CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(call.id)
    data = await state.get_data()
    cart = data.get('cart')
    if call.data == 'back_cart':
        await send_cart(cart, call.message.chat.id, 0)
        await state.update_data(i=0)

    if call.data == 'confirm':
        await call.message.answer('–û—Ç–ª–∏—á–Ω–æ! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è')
        await Checkout.name.set()


@dp.message_handler(state=Checkout.name)
async def name_handler(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
    await Checkout.phone.set()


@dp.message_handler(state=Checkout.phone)
async def phone_handler(message: types.Message, state: FSMContext):
    if re.search(r'^(8|\+?\d{1,3})?[ -]?\(?(\d{3})\)?[ -]?(\d{3})[ -]?(\d{2})[ -]?(\d{2})$', message.text):
        data = await state.get_data()
        name = data.get('name')
        cart = data.get('cart')
        cart_product = cart.get_products()
        text = '–ü–æ—Å—Ç—É–ø–∏–ª –∑–∞–∫–∞–∑:\n\n'
        for product in cart_product:
            text += f'{product.product.name} - {product.quantity} —à—Ç. {product.total_price} —Ä—É–±.\n'
        text += f'\n–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞: {cart.total_price} —Ä—É–±\n\n' \
                f'–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:\n' \
                f'{name} - {message.text}'
        await message.answer('–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç. –û–∂–∏–¥–∞–π—Ç–µ —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è')
        await bot.send_message(
            int(settings.ADMIN_ID),
            text=text
        )
    else:
        await message.answer('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä,—á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ —Å –≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏')
        await Checkout.phone.set()
